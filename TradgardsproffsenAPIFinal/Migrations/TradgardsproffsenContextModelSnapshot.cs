// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradgardsproffsenAPI.DbContexts;

namespace TradgardsproffsenAPI.Migrations
{
    [DbContext(typeof(TradgardsproffsenContext))]
    partial class TradgardsproffsenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.AllLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AllLead");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Accomplished")
                        .HasColumnType("int");

                    b.Property<int?>("AllLeadId")
                        .HasColumnType("int");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HitRate")
                        .HasColumnType("float");

                    b.Property<int>("Invoiced")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LatestLead")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Left")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SalesTarget")
                        .HasColumnType("float");

                    b.Property<int?>("SentOutLeadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllLeadId");

                    b.HasIndex("SentOutLeadId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.CompanyJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobId");

                    b.ToTable("CompanyJob");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.LeadJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadJobb");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.LostLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LostLead");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.SentOutLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SentOutLead");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.ValidatedLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ValidatedLead");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Models.JobDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SentOutLeadId")
                        .HasColumnType("int");

                    b.Property<int?>("ValidatedLeadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SentOutLeadId");

                    b.HasIndex("ValidatedLeadId");

                    b.ToTable("JobDto");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.Company", b =>
                {
                    b.HasOne("TradgardsproffsenAPI.Entities.AllLead", null)
                        .WithMany("CompaniesSentTo")
                        .HasForeignKey("AllLeadId");

                    b.HasOne("TradgardsproffsenAPI.Entities.SentOutLead", null)
                        .WithMany("CompaniesSentTo")
                        .HasForeignKey("SentOutLeadId");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.CompanyJob", b =>
                {
                    b.HasOne("TradgardsproffsenAPI.Entities.Company", "Company")
                        .WithMany("AvailableJobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradgardsproffsenAPI.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.LeadJob", b =>
                {
                    b.HasOne("TradgardsproffsenAPI.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradgardsproffsenAPI.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.ValidatedLead", b =>
                {
                    b.HasOne("TradgardsproffsenAPI.Entities.Company", null)
                        .WithMany("Leads")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Models.JobDto", b =>
                {
                    b.HasOne("TradgardsproffsenAPI.Entities.SentOutLead", null)
                        .WithMany("Jobbs")
                        .HasForeignKey("SentOutLeadId");

                    b.HasOne("TradgardsproffsenAPI.Entities.ValidatedLead", null)
                        .WithMany("Jobbs")
                        .HasForeignKey("ValidatedLeadId");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.AllLead", b =>
                {
                    b.Navigation("CompaniesSentTo");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.Company", b =>
                {
                    b.Navigation("AvailableJobs");

                    b.Navigation("Leads");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.SentOutLead", b =>
                {
                    b.Navigation("CompaniesSentTo");

                    b.Navigation("Jobbs");
                });

            modelBuilder.Entity("TradgardsproffsenAPI.Entities.ValidatedLead", b =>
                {
                    b.Navigation("Jobbs");
                });
#pragma warning restore 612, 618
        }
    }
}
